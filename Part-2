1. What is MVVM?

In mvc – view send events to the controller , the controller then send request to model for data and perform business logic if required, model notifies controller in case of any data change and controller send data to view to present
MVC was resulted into massive view controller which were difficult to manage 
In mvvm, view controller and view is combined to become “view” 
And one more layer is added called “viewmodel”, this new layer will communicate with model and process the data and perform some business logic if required and sends final data to viewcontroller that is only required to update the ui.

Example – 
For a student entry form – 
Studentviewcontroller – will act as view to display final result on screen
Studentviewmodel  class – will act as viewmodel to perform heavy tasks and business logic
Studentmodel – will be model which will represent the database model for student class





2. What is Dynamic dispatch?

Dynamic dispatch is the process of selecting which implementation of a polymorphic operation (method or function) to call at run time. Dynamic dispatch means that the Objective-C runtime decides at runtime which implementation of a particular method or function it needs to invoke. 
For example, if a subclass overrides a method of its superclass, dynamic dispatch figures out which implementation of the method needs to be invoked, that of the subclass or that of the parent class.

Swift uses the Swift runtime whenever possible. The result is that it can make a number of optimizations. While Objective-C solely relies on dynamic dispatch, Swift only opts for dynamic dispatch if it has no other choice. If the compiler can figure out at compile time which implementation of a method it needs to choose, it wins a few nanoseconds by opting out of dynamic dispatch.
By applying the ”dynamic” declaration modifier to a member of a class, you tell the compiler that dynamic dispatch should be used to access that member. 

“dynamic” declaration modifier can only be used for members of a class. Structures and enumerations don’t support inheritance, which means the runtime doesn’t have to figure out which implementation it needs to use.
Piror to Swift 4, a function with ”dynamic” modifier is implicitly visible to Objective-C. Meanwhile Swift 4 requires you to explicitly declare it with ”@objc” attribute.
Swift provides 2 ways to achieve dynamism: table dispatch and message dispatch.

table dispatch : With this method, a class is associated with a so-called virtual table which comprises an array of function pointers to the real implementation corresponding to that class. Note that the vtable is constructed at compile time. Thus, there are only two additional instructions (read and jump) as compared to static dispatch. So the dispatch should be theoretically pretty fast.
message dispatch : it is Objective-C that provides this mechanism. Every time an Objective-C method is called, the invocation is passed to ”objc_msgSend” which handles the look ups. Unlike table dispatch, the message passing dictionary could be modified at runtime, enabling us to adjust the program behaviours while running. 





3. Difference between Dynamic dispatch vs static dispatch?

When something is dynamically dispatched, this means the compiler does not know which method is being called at runtime and has to figure it out. The reason for this is because Swift allows you to override the methods or properties of a superclass in one of its subclasses. Therefore, the compiler needs to determine are you referring to the superclasses’ implementation or are you referring to the implementation of the subclass? This can increase the overhead of your application.

When something is statically dispatched, we are dealing with the opposite scenario. With static dispatch, the compiler does in fact know which property or method is being called at runtime, which is a performance boost. You can achieve static dispatch by marking a base class with the “final” keyword. This lets the compiler know that this class can not have any subclasses and that the method/property you are referring to is its only implementation.

Another example is the “static” keyword for when defining type methods or properties. This keyword is really just short for “final class”. This lets the compiler know that this is the final implementation of this method and it will not be overridden. Therefore, it will be statically dispatched.

When defining a type method you can mark it with “class” or “static”, but which you choose determine how it will be dispatched.







4. Difference between @escaping and @nonescaping?

If a closure is passed as an argument to a function and it is invoked after the function returns, the closure is escaping. 

In Swift 1 and Swift 2, closure parameters was escaping by default. Your closure wouldn’t escape the function’s body, if no you could mark the closure parameters as @nonescaping.

In Swift 3, they made a change: closure parameters are nonescaping by default, if you wanna to escape the closure execution, you have to use @escaping with the closure parameters. 

There are many different benefits of making non-escaping as by default. The most important benefits are performance and code optimisation by the compiler, because if the compiler knows that the closure is non-escaping, it will take care about the memory allocation for the closure.







5. WHAT IS “lazy”?

A lazy stored property is a property whose initial value is not calculated until the first time it is used. You indicate a lazy stored property by writing the ”lazy” modifier before its declaration.

If the your app is a complex one, then the memory issues are one of the major challenges. So, the developer should be really writing an optimised code which consider memory allocation at first place.  The developer need to avoid doing expensive work unless it’s really needed. We can achieve that by using lazy.

You can’t use lazy with let .

You can’t use it with computed properties . Because, a computed property returns the value every time we try to access it after executing the code inside the computation block.

You can use lazy only with members of struct and class .

Lazy variables are not initialised automatically and so is not thread safe.







6. Difference between [unowned self] & [week self]?

The only time where you really want to use [unowned self] or [weak self] is when you would create a strong reference cycle. A strong reference cycle is when there is a loop of ownership where objects end up owning each other (maybe through a third party) and therefore they will never be deallocated because they are both ensuring that each other stick around.

In case of a closure, you just need to realize that any variable that is referenced inside of it, gets “owned” by the closure. As long as the closure is around, those objects are guaranteed to be around. The only way to stop that ownership, is to use the [unowned self] or [weak self]. So if a class owns a closure, and that closure captures a strong reference to that class, then you have a strong reference cycle between the closure and the class. This also includes if the class owns something that owns the closure.

If self could be nil in the closure use [weak self].

If self will never be nil in the closure use [unowned self].






7. Difference between Process & Threads?

a process can contain multiple threads of execution, and each thread can perform multiple tasks one at a time.

Task: a simple, single piece of work that needs to be done.

Thread: a mechanism provided by the operating system that allows multiple sets of instructions to operate at the same time within a single application.

Process: an executable chunk of code, which can be made up of multiple threads.







8. Difference between Operation & GCD?

Both are used to do any type of multithreading operation in ios

GCD is a lightweight way to represent units of work that are going to be executed concurrently. You don’t schedule these units of work; the system takes care of scheduling for you. Adding dependency among blocks can be a headache. Canceling or suspending a block creates extra work for you as a developer!

Operation adds a little extra overhead compared to GCD, but you can add dependency among various operations and re-use, cancel or suspend them.

Operation and OperationQueue are built on top of GCD. As a very general rule, Apple recommends using the highest-level abstraction, then dropping down to lower levels when measurements show this is necessary.








9. What is Operation?

Operation is an abstract class, designed for sub-classing. Each subclass represents a specific task.

main() is the method you override in Operation subclasses to actually perform work.


class ImageDownloader : Operation{
           let photoRecord: PhotoRecord
		init(_ photoRecord: PhotoRecord) {
    		self.photoRecord = photoRecord
 		 }
		override func main(){
			guard let imageData = try? Data(contentsOf: photoRecord.url) else { return }
			if !imageData.isEmpty {
      			photoRecord.image = UIImage(data:imageData)
   		 }
		}
	}
  
  
  
  
  
  
  
  10. What is OperationQueue?

A queue that regulates the execution of operations

An operation queue executes its queued Operation objects based on their priority and readiness. After being added to an operation queue, an operation remains in its queue until it reports that it is finished with its task. 

OperationQueue is particularly powerful because it lets you control precisely how many simultaneous operations can run and what quality of service you need, while also letting you schedule work using closures. You can even ask the operation queue to wait until all its operations are finished, which makes scheduling easier.

let queue = OperationQueue() 
	for image in images { 
		queue.addOperation { 
			self.process(image) 
		}
	 } 
queue.waitUntilAllOperationsAreFinished()

You can add as many operations as you want, but they don’t all get executed at the same time. Instead, OperationQueue limits the number of operations based on system conditions – if it’s a more powerful device that isn’t doing much right now, you’ll get more operations than a less powerful device or a device that’s busy with other work.

You can override this behavior if you need something specific:

queue.maxConcurrentOperationCount = 4





11. What is GCD – Grand Central Dispatch ?

Grand Central Dispatch or GCD is a low-level API for managing concurrent operations.

DispatchQueue –
Global Queue –Using to perform non-UI work in the background.

Main Queue –Using to update the UI after completing work in a task on a concurrent queue.

List of DispatchQueue Priority –
.userInteractive
.userInitiated
.default
.utility
.background
.unspecified


DispatchQueue.global(qos: .background).async { 
    // Call your background task               
      DispatchQueue.main.async {                            
        // UI Updates here for task complete.             
        }
}





12. What does a DispatchGroup do?

Let’s say you’ve got several long running tasks to perform. After all of them have finished, you’d like to run some further logic. You could run each task in a sequential fashion, but that isn’t so efficient – you’d really like the former tasks to run concurrently. DispatchGroup enables you to do exactly this.

examples:

You need to run two distinct network calls. Only after they’ve both returned do you have the necessary data to parse the responses.

An animation is running, parallel to a long database call. Once both of those have finished, you’d like to hide a loading spinner.

Syntex – 

let dispatchGroup = DispatchGroup() 
dispatchGroup.enter() 
longRunningFunction { dispatchGroup.leave() }
 dispatchGroup.enter() 
longRunningFunctionTwo { dispatchGroup.leave() } 
dispatchGroup.notify(queue: .main) { 
	print("Both functions complete ")
 }
 
 
 
 
 
 
 
 13. Why Swift is Protocol Oriented Programming?

To understand what is protocol oriented programming, you need to understand what are drawbacks of objected oriented programming.

It has only one inheritance. If we have very complicated hierarchy of inheritance, the bottom class may have a lot of unnecessary state to hold.

It uses class which is a reference type. Reference type may cause code unsafe. e.g. Processing collection of reference types while they are being modified.

swift is protocol oriented programming, here are some benefits -:

Conforms multiple protocols.
Can be used by not only class, but also structures and enumerations.
It has protocol extension that can be used to define a default behaviour of the functions in a protocol.
It prefers to use value type instead of reference type. Have a look at the standard swift library here, you can find majority of types are structures which is value type. But this doesn’t mean you don’t use class at all, in some situation, you have to use class e.g. Singleton.

So protocol oriented programming is nothing but just an another programming paradigm that try to solve the OOP drawbacks.








14. What is Codable & Decodable in Swift 4?

Make your data types encodable and decodable for compatibility with external representations such as JSON.

Codable protocol is new protocol introduced by Apple in Swift 4 can provide Encodable and Decodable built-in feature. It will make JSON parsing easier. 

For below JSON –
{"userId": 1,"id": 1,"title": "delectus aut autem","completed": false}

Codable Model will look like this – 
 Struct User: Codable {
  var userId: Int
  var id: Int
  var title: String 
  var completed: Bool
 }

And we can parse json like this – 

do {  
//here dataResponse received from a network request   
let decoder = JSONDecoder()
let model = try decoder.decode([User].self, from: dataResponse) //Decode JSON Response Data 
  print(model)
 } 
catch let parsingError 
{   
 print("Error", parsingError)
}





15. Example of Codable for complex JSON?





